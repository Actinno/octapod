
#import abc
from threading import Thread

#class TaskInterface(metaclass=abc.ABCMeta):
#    @classmethod
#    def __subclasshook__(cls, subclass):
#        return (
#                hasattr(subclass, 'name')
#            and hasattr(subclass, 'run')
#            and callable(subclass.run)
#            and hasattr(subclass, 'stop')
#            and callable(subclass.stop)
#            or NotImplemented
#        )
#
#    @abc.abstractmethod
#    def run(self):
#        """Inicia una tarea"""
#        raise NotImplementedError
#
#    @abc.abstractmethod
#    def stop(self):
#        """Detiene una tarea"""
#        raise NotImplementedError

class Task(object):
    """
    Clase base para las tareas que controla la clase :class:`eliot.controller.ControllerThread`.
    La clase :class:`Task` debe ser extendida para implementar la funcionalidad que corresponda a la
    tarea que se debe ejecutar.
    """

    def __init__(self):
        self.count = 0
        self.name = None

    def start_new_thread(self):
        """
        Método para crear un nuevo thread para la tarea y luego iniciarlo
        """

        self.__thread = Thread(target=self.run, name=f"thread_{self.name}", daemon=True)
        self.__thread.start()

    def join_thread(self):
        """
        Método para esperar a que termine la ejecución del threadde la tarea
        """

        self.__thread.join()

    def thread_is_alive(self):
        """
        Método para validar que el thread asociado a la tarea esté vivo

        :rtype: bool
        """

        return self.__thread.is_alive()

    def run(self):
        """
        Método de ejecución de la tarea, debe ser implementado por la clase
        que extienda a :class:`Task`
        """

        raise NotImplementedError

    def stop(self):
        """
        Método de detención de la tarea, debe ser implementado por la clase
        que extienda a :class:`Task`
        """

        raise NotImplementedError

