
from pymodbus.client.sync import ModbusTcpClient as ModbusClient
from eliot.logging.configured import log
from eliot.drivers import load_driver

class ModbusGateway(object):
    """
    Permite conectarse y desconectarse a un gateway ModBus.
    Mantiene un inventario de los dispositivos Modbus conectados al gateway.

    :ivar name: Inicializado con el valor de gw_name
    :ivar addr: Inicializado con el valor de gw_addr
    :ivar port: Inicializado con el valor de gw_port
    :ivar devices: Inicializado como un set vacío, poblado por el método :func:`ModbusGateway.add_device`
    :ivar devices_by_addr: Inicializado como un diccionario vacío, poblado por el método :func:`ModbusGateway.add_device`
    :ivar devices_by_unique_id: Inicializado como un diccionario vacío, poblado por el método :func:`ModbusGateway.add_device`
    """

    def __init__(self, gw_name, gw_addr, gw_port):
        self.name = gw_name
        self.addr = gw_addr
        self.port = gw_port
        self.__conn = None
        self.devices = set()
        self.devices_by_addr = {}
        self.devices_by_unique_id = {}
        self.__drivers_cache = {}

    def gw_conn(self):
        """
        Entrega una referencia al objeto de conexión de ModbusTcpClient

        :rtype: ModbusTcpClient
        """

        if self.__conn is None:
            raise RuntimeError("El gateway no está conectado")
        return self.__conn

    def connect(self):
        """
        Establece una conexión ModbusClient TCP hacia el gateway configurado
        """

        log.debug(f"Conectandome a gateway {self.addr}:{self.port}")
        self.__conn = ModbusClient(self.addr, port=self.port)
        self.__conn.connect()

    def is_socket_open(self):
        return self.__conn.is_socket_open()

    def close(self):
        """
        Cierra la conexión con el gateway Modbus
        """

        if self.__conn is not None:
            log.debug(f"Cerrando conexión de cliente ModBus con gateway {self.addr}:{self.port}")
            self.__conn.close()
            self.__conn = None

    def add_device(self, device_cfg):
        """
        Agrega un dispositivo al inventario al gateway.

        :param device_cfg: Identifica a un dispositivo Modbus conectado al gateway
        :type device_cfg: :class:`eliot.config.ConfigData.ConfigData.modbusDevice`
        """

        drv = self.__drivers_cache.get(device_cfg.driver)
        if drv is None:
            log.info(f"Cargando driver de módulo {device_cfg.driver}")
            drv = self.__drivers_cache[device_cfg.driver] = load_driver(device_cfg.driver)

        log.info(f"Agregando dispositivo '{device_cfg.description}' con dirección '{device_cfg.modbus_addr}'")
        modbusDevice = drv(self, device_cfg)

        self.devices.add(modbusDevice)
        self.devices_by_addr[device_cfg.modbus_addr] = modbusDevice
        self.devices_by_unique_id[device_cfg.unique_id] = modbusDevice

    def clear_devices(self):
        """
        Borra la lista de dispositivos del gateway
        """

        self.devices = set()
        self.devices_by_addr = {}
        self.devices_by_unique_id = {}

