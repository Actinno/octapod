
from eliot.component.ModbusDevice import ModbusDevice

class EasioSpecs(ModbusDevice):
    """
    Clase de espcificaciones generales del dispositivo Easio.
    Debe ser extendida por una clase llamada Driver.
    
    :ivar digital_relay_output: addr: 000 - type: uint_16 - size: 1
    :ivar digital_input: addr: 001 - type: uint_16 - size: 1
    :ivar digital_input_switching_count: addr: 002 - type: uint_32 - size: 2
    :ivar baud_rate: addr: 010 - type: uint_16 - size: 1
    :ivar slave_id: addr: 011 - type: uint_16 - size: 1
    :ivar input_mode: addr: 012 - type: uint_16 - size: 1
    :ivar input_delay_time: addr: 013 - type: uint_32 - size: 2
    :ivar order_number: addr: 015 - type: uint_32 - size: 2
    :ivar serial_number: addr: 017 - type: uint_32 - size: 2
    
    Algunos Holding Registers tienen traducciones, especificadas a continuaci√≥n:
     - digital_relay_output: ['OFF', 'ON']
     - digital_input: ['OFF', 'ON']
     - baud_rate: ['1200 baud', '2400 baud', '4800 baud', '9600 baud', '19200 baud', '38400 baud', '57600 baud', '115200 baud']
     - input_mode: ['Active High', 'Active Low']
    """

    def __init__(self, mgw, device_cfg):
        no_translation = []
        hr_000_translation = ['OFF', 'ON']
        hr_001_translation = ['OFF', 'ON']
        hr_010_translation = ['1200 baud', '2400 baud', '4800 baud', '9600 baud', '19200 baud', '38400 baud', '57600 baud', '115200 baud']
        hr_012_translation = ['Active High', 'Active Low']
    
        hr_000_args = [ "digital_relay_output", 0, 1, "uint_16" ]
        hr_001_args = [ "digital_input", 1, 1, "uint_16" ]
        hr_002_args = [ "digital_input_switching_count", 2, 2, "uint_32" ]
        hr_010_args = [ "baud_rate", 10, 1, "uint_16" ]
        hr_011_args = [ "slave_id", 11, 1, "uint_16" ]
        hr_012_args = [ "input_mode", 12, 1, "uint_16" ]
        hr_013_args = [ "input_delay_time", 13, 2, "uint_32" ]
        hr_015_args = [ "order_number", 15, 2, "uint_32" ]
        hr_017_args = [ "serial_number", 17, 2, "uint_32" ]

        device_cfg.model = "easio"
        super().__init__(mgw, device_cfg)
        self.addresses_blocks = {'0': {'start_addr': 0, 'end_addr': 2, 'word_count': 4, 'holding_registers': [0, 1, 2]}, '1': {'start_addr': 10, 'end_addr': 17, 'word_count': 10, 'holding_registers': [10, 11, 12, 13, 15, 17]}}
        self.add_holding_register(self, *hr_000_args, hr_000_translation)
        self.add_holding_register(self, *hr_001_args, hr_001_translation)
        self.add_holding_register(self, *hr_002_args, no_translation)
        self.add_holding_register(self, *hr_010_args, hr_010_translation)
        self.add_holding_register(self, *hr_011_args, no_translation)
        self.add_holding_register(self, *hr_012_args, hr_012_translation)
        self.add_holding_register(self, *hr_013_args, no_translation)
        self.add_holding_register(self, *hr_015_args, no_translation)
        self.add_holding_register(self, *hr_017_args, no_translation)
