
import time
import psycopg2
from psycopg2 import sql
import psycopg2.extensions
from eliot.logging.configured import log
from eliot.component.HealthStatus import HealthStatus as hs

class ControllerDB(object):
    def __init__(self, **kwargs):
        self.db_config = kwargs.get("config")
        self.gw_name = kwargs.get("gw_name")
        self.connect()

    def connect(self):
        log.info("Intentando conectar a base de datos")
        self.conn = psycopg2.connect(
            user=self.db_config.user, 
            password=self.db_config.pwd,
            host=self.db_config.host,
            port=self.db_config.port,
            database=self.db_config.db,
            options="-c search_path={}".format(self.db_config.schema)
        )
        hs.set_status(self.gw_name, 'db_connection', "OK")

        log.info("Conexion establecida a base de datos")
        self.cursor = self.conn.cursor()

    def close(self):
        log.info("Cerrando conexi√≥n a base de datos")
        self.cursor.close()
        self.conn.close()

    # XXX: este chequeo no sirve para nada
    def check_and_reconnect(self):
        try:
            self.conn.isolation_level
        except OperationalError as oe:
            log.error("Reconectando a base de datos")
            self.connect()

