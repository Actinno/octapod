
import sys
from eliot.config import config
from eliot.controller.ControllerMG import ControllerMG
from eliot.logging.configured import log
from eliot.controller.ControllerHealth import *
from eliot.controller.ControllerThread import ControllerThread

class MiniEliot(object):
    """
    Inicia el proceso printipal de MiniEliot ejecutando el método
    :func:`MiniEliot.start` y lo detiene cuando se ejecuta :func:`MiniEliot.stop`.
    """

    def start(self):
        """
        Este proceso se encarga de crear un thread para el controlador
        de salud y uno para cada gateway configurado.

        Todos los threads son controlados por un objeto de la
        clase :class:`eliot.controller.ControllerThread`

        Luego de iniciar las tareas se queda esperando en un loop, verificando
        que los threads estén activos. Si detecta que algún thread murió,
        entonces lo vuelve a iniciar.
        """

        log.info("========== Iniciando minieliot ==========")
        health_controller = ControllerHealth(port=9999, debug=True)
        tasks = [ health_controller ]

        for gw in config.gateways:
            if gw.enable:
                log.info(f"Registrando gateway {gw.name} ({gw.addr}:{gw.port})")
                gw_controller = ControllerMG(gw)
                tasks.append(gw_controller)
            else:
                log.info(f"Ignorando gateway {gw.name} ({gw.addr}:{gw.port}) - DESHABILITADO")

        self.tc = ControllerThread()

        self.tc.setup_tasks(tasks)
        self.tc.start_tasks()
        self.tc.control_loop()
        self.tc.join()

    def stop(self, signum, frame):
        """
        Le indica al Thread Controller que debe detener todos los threads
        que ha iniciado.

        Los parámetros signum y frame son ignorados.
        """

        self.tc.stop_tasks()

    def reload(self, signum, frame):
        """
        Vuelve a cargar la configuración de MiniEliot

        Los parámetros signum y frame son ignorados.
        """

        log.info("Recargando configuración: POR IMPLEMENTAR")
        # TODO: IMPLEMENTAR
        """
        # Este primer intento provoca que se vuelva a leer la configuración 
        # dentro de MainThread, pero los threads de ControllerMG mantienen
        # la configuración.
        #
        # Tal vez dentro de MainThread tendría que terminar los threads y
        # volver a iniciarlos
        #
        import importlib
        import eliot
        importlib.reload(eliot.config)
        """

