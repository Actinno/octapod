"""
Este modulo configura un objeto logger llamado 'log'.
La configuración del logger se especifica en el archivo
de configuración del proyecto.

El modo de uso es:

from eliot.logging.configured import log
"""

import socket
import logging
import logging.config
import logging.handlers
from eliot.config import config

def __get_log_config(attr):
    if hasattr(config.logging, attr):
        config_value = getattr(config.logging, attr)
        if config_value is not None:
            return config_value
    default_value = __DEFAULTS.get(attr)
    if default_value is None:
        raise RuntimeError(f"El atributo '{attr}' no está definido la configuración de logging")
    return default_value

def __get_log_filename():
    fn = __get_log_config('logdir') + "/" + __get_log_config('logfile')
    return fn

def __get_handler_config():
    handlers = {
        #'syslog': {
        #    # TODO: Corregir configuración para syslog, no funciona
        #    'class': 'logging.handlers.SysLogHandler',
        #    'address': '/dev/log',
        #    'facility': 'LOG_USER',
        #    'socktype': socket.SOCK_DGRAM,
        #},
        'stream': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
            'level': 'DEBUG',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': __get_log_filename(),
            'mode': 'a',
            'formatter': 'default',
            'encoding': 'utf-8',
            'level': 'DEBUG',
        },
        'rotating_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': __get_log_filename(),
            'mode': 'a',
            'formatter': 'default',
            'encoding': 'utf-8',
            'level': 'DEBUG',
            'maxBytes': __get_log_config('rotate_max_bytes'),
            'backupCount': __get_log_config('max_backup'),
        },
        'time_rotating_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': __get_log_filename(),
            'formatter': 'default',
            'encoding': 'utf-8',
            'level': 'DEBUG',
            'backupCount': __get_log_config('max_backup'),
            'when': __get_log_config('rotate_when'),
            'interval': __get_log_config('rotate_interval'),
        },
    }
    
    handler_name = __get_log_config('handler')
    return { handler_name: handlers[handler_name] }

__DEFAULTS = {
    'handler': 'time_rotating_file',
    'level': 'INFO',
    'logdir': '/var/log/minieliot',
    'logfile': 'minieliot.log',
    'max_backup': 30,
    'rotate_max_bytes': 10240,
    'rotate_when': 'D',
    'rotate_interval': 1,
}

__LOG_CONFIG = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'default': {
            'format': '%(asctime)-15s %(threadName)-15s '
                      '%(levelname)-8s %(module)-15s:%(lineno)-8s %(message)s',
        },
    },
    # Sólo registro el handler que está especificado en el archivo
    # de configuración (o el default). De lo contrario, trata de
    # inicializarlos todos y eso puede generar errores.
    'handlers': __get_handler_config(),
    'root': {
        'handlers': [ __get_log_config('handler') ],
        'level': __get_log_config('level'),
    },
}

logging.config.dictConfig(__LOG_CONFIG)
log = logging.getLogger('minieliot')

