
from eliot.config.ConfigReader import ConfigReader
from eliot.logging.basic import log
from eliot.util.file import load_json_file

class InvalidConfiguration(Exception):
    pass

class ConfigData(object):
    """
    Clase que cotiene la configuración interpretada de miniEliot.

    Utiliza :func:`eliot.config.ConfigReader.ConfigReader().get_config()` para leer
    el archivo de configuración JSON, validar que cumpla con el schema definido
    y que la firma digital sea válida.

    Una vez leida la configuración, inicializa al objeto de clase ConfigData
    con los siguientes atributos:

    :ivar minieliot: objeto de clase :class:`ConfigData.minieliotData`
    :ivar logging: objecto de clase :class:`ConfigData.logConfig`
    :ivar db_config: objeto de clase :class:`ConfigData.dbConfigData`
    :ivar rest_config: objeto de clase :class:`ConfigData.restConfigData`
    :ivar device_specs: valor retornado por método :func:`__getDeviceSpecs`
    :ivar gateways: valor retornado por método :func:`__getGateways`
    """

    def __init__(self):
        config              = ConfigReader().get_config()
        self.__specs_cache  = {}
        self.minieliot      = self.minieliotData(**config.get("minieliot"))
        self.logging        = self.logConfig(**config.get("logging"))
        self.db_config      = self.dbConfigData(**config.get("db_config"))
        self.rest_config    = self.restConfigData(**config.get("rest_config"))
        self.drivers        = self.__getDrivers(config.get("drivers"))
        self.gateways       = self.__getGateways(config.get("gateways"), config.get("drivers"))

    def __getGateways(self, gateways, drivers):
        """
        :param gateways: Lista de diccionarios que definen la
                         configuración de un gateway y los
                         dispositivos que controla.
                         La estructura está definida en el archivo
                         de configuración en formato JSON.
        :type gateways: list[dict]
        :returns: Un set de objetos de clase :class:`ConfigData.modbusGateway`
        :rtype: set[ConfigData.modbusGateway]
        """

        gateways_set = set()
        for gw_name in gateways:
            gw_device_list = []
            cfg_gw_devices = gateways[gw_name]["devices"]
            for d in cfg_gw_devices:
                device_cfg_reading = d["reading"]
                try:
                    hr_readings = drivers[d["driver"]]["hr_readings"][d["reading"]]
                except (KeyError, TypeError, NameError):
                    raise InvalidConfiguration(f"No hay una definición de lectura llamada '{device_cfg_reading}' para el driver '{d['driver']}'")
                #self.__validate_readings_config(d["driver"], hr_readings)
                device = self.modbusDevice(
                        d["enable"], 
                        d["driver"], 
                        hr_readings, 
                        d["modbus_addr"], 
                        d["unique_id"], 
                        d["description"]
                    )
                gw_device_list.append(device)
            gw_addr = gateways[gw_name]["addr"]
            gw_port = gateways[gw_name]["port"]
            gw_enable = gateways[gw_name]["enable"]
            gateway = self.modbusGateway(gw_name, gw_enable, gw_addr, gw_port, gw_device_list)
            gateways_set.add(gateway)
        return gateways_set

    def __validate_readings_config(self, driver, hr_readings):
        specs_file = self.drivers[driver].file
        specs = self.__specs_cache.get(specs_file)
        if specs is None:
            log.debug(f"Cargando archivo de specs '{specs_file}'")
            specs = self.__specs_cache[specs_file] = load_json_file(specs_file)
        
        if "ALL" in hr_readings:
            if len(hr_readings) == 1:
                return True
            else:
                raise InvalidConfiguration(f"El valor ALL no puede ir acompañado por otros atributos de lectura")

        lower_case_hr = list(map(str.lower, specs["holding_registers"]))
        for hr_name in hr_readings:
            if hr_name.lower() not in lower_case_hr:
                raise InvalidConfiguration(f"{hr_name} no es un atributo válido del driver {driver}")

    def __getDrivers(self, drivers):
        """
        :param drivers: Lista de drivers Modbus soportados
        :type drivers: list[dict]
        :returns: Un diccionario de objetos de clase :class:`ConfigData.deviceDriver` donde la key es el nombre del driver
        :rtype: dict[ConfigData.deviceDriver]
        """

        driver_list = dict()
        for d_name in drivers:
            driver_list[d_name] = self.deviceDriver(d_name, drivers[d_name]["file"])
        return driver_list

    class minieliotData(object):
        """
        Clase que contiene los parámetros definidos dentro de la sección
        .minieliot del archivo de configuración en formato JSON

        :ivar id: Se inicializa con el valor de kwargs['id']
        :ivar version: Se inicializa con el valor de kwargs['version']
        :ivar mode: Se inicializa con el valor de kwargs['mode']
        :ivar data_dir: Se inicializa con el valor de kwargs['data_dir']
        :ivar log_dir: Se inicializa con el valor de kwargs['log_dir']
        :ivar read_frequency: Se inicializa con el valor de kwargs['read_frequency']
        """

        def __init__(self, **kwargs):
            self.id             = kwargs.get("id")
            self.version        = kwargs.get("version")
            self.mode           = kwargs.get("mode")
            self.data_dir       = kwargs.get("data_dir")
            self.log_dir        = kwargs.get("log_dir")
            self.read_frequency = kwargs.get("read_frequency")

    class logConfig(object):
        """
        Clase que contiene la configuración de logging que se usará en el
        programa, una vez que se haya cargado la configuración.

        :ivar handler: Se debe especificar alguno de los handlers soportados: file, rotating_file, time_rotating_file.
        :ivar level: Identifica el nivel de logs que se va a guardar, puede ser uno de DEBUG, INFO, WARNING, ERROR o CRITICAL
        :ivar logdir: Identifica el directorio donde se almacenarán los logs
        :ivar logfile: Identifica el nombre del archivo que se creará dentro del directorio configurado en 'logdir'
        :ivar max_backup: Cantidad de logs históricos que se mantendrá. Sólo aplica a los handlers rotating_file y time_rotating_file
        :ivar rotate_max_bytes: Cantidad máxima de bytes que puede tener el archivo de log antes de rotarlo. Sólo aplica a handler rotating_file
        :ivar rotate_when: Identifica cuándo debe rotarse el log (revisar documentación de :class:`logging.handlers.TimedRotatingFileHandler`. Solo aplica a handler time_rotating_file.
        :ivar rotate_interval: Identifica la frecuencia de rotación. Solo aplica a handler time_rotating_file.
        """

        def __init__(self, **kwargs):
            self.handler            = kwargs.get("handler")
            self.level              = kwargs.get("level")
            self.logdir             = kwargs.get("logdir")
            self.logfile            = kwargs.get("logfile")
            self.max_backup         = kwargs.get("max_backup")
            self.rotate_max_bytes   = kwargs.get("rotate_max_bytes")
            self.rotate_when        = kwargs.get("rotate_when")
            self.rotate_interval    = kwargs.get("rotate_interval")

    class dbConfigData(object):
        """
        Clase que contiene los parámetros definidos dentro de la sección
        .db_config del archivo de configuración en formato JSON

        :ivar user: Se inicializa con el valor de kwargs['user']
        :ivar pwd: Se inicializa con el valor de kwargs['pass']
        :ivar host: Se inicializa con el valor de kwargs['host']
        :ivar port: Se inicializa con el valor de kwargs['port']
        :ivar db: Se inicializa con el valor de kwargs['db']
        :ivar schema: Se inicializa con el valor de kwargs['schema']
        """

        def __init__(self, **kwargs):
            self.user   = kwargs.get("user")
            self.pwd    = kwargs.get("pass")
            self.host   = kwargs.get("host")
            self.port   = kwargs.get("port")
            self.db     = kwargs.get("db")
            self.schema = kwargs.get("schema")

    class restConfigData(object):
        """
        Clase que contiene los parámetros definidos dentro de la sección
        .rest_config del archivo de configuración en formato JSON

        :ivar user: Se inicializa con el valor de kwargs['user']
        :ivar pwd: Se inicializa con el valor de kwargs['pass']
        :ivar url: Se inicializa con el valor de kwargs['url']
        """

        def __init__(self, **kwargs):
            self.user   = kwargs.get("user")
            self.pwd    = kwargs.get("pass")
            self.url    = kwargs.get("url")

    class deviceDriver(object):
        """
        Clase que contiene los parámetros definidos dentro de la sección
        .device_specs.<DEVICE> del archivo de configuración en formato JSON

        :ivar model: Se inicializa con el valor de device_model
        :ivar file: Se inicializa con el valor de filename
        :ivar hr_readings: 
        """

        def __init__(self, device_model, filename):
            self.model = device_model
            self.file = filename

    class modbusGateway(object):
        """
        Clase que contiene los parámetros definidos dentro de la sección
        .gateways.<GW_NAME> del archivo de configuración en formato JSON

        :ivar name: Se inicializa con el valor de gw_name
        :ivar enable: Se inicializa con el valor de gw_enable
        :ivar addr: Se inicializa con el valor de gw_addr
        :ivar port: Se inicializa con el valor de gw_port
        :ivar devices: Se inicializa con el valor de gw_devices
        """

        def __init__(self, gw_name, gw_enable, gw_addr, gw_port, gw_devices):
            self.name    = gw_name
            self.enable  = gw_enable
            self.addr    = gw_addr
            self.port    = gw_port
            self.devices = gw_devices

    class modbusDevice(object):
        """
        Clase que contiene los parámetros definidos dentro de la sección
        .gateways.<GW_NAME>.devices del archivo de configuración en formato JSON

        :ivar enable: Se inicializa con el valor de enable
        :ivar driver: Se inicializa con el valor de driver
        :ivar hr_readings: Listade atributos que se debe leer del dispositivo Modbus
        :ivar modbus_addr: Se inicializa con el valor de modbus_addr
        :ivar unique_id: Se inicializa con el valor de unique_id
        :ivar description: Descripción del dispositivo Modbus. Por ejemplo, para indicar ubicación
        """

        def __init__(self, enable, driver, hr_readings, modbus_addr, unique_id, description):
            self.enable      = enable
            self.driver      = driver
            self.modbus_addr = modbus_addr
            self.unique_id   = unique_id
            self.hr_readings = hr_readings
            self.description = description

