
import json
from json.decoder import JSONDecodeError
from eliot.logging.basic import log
from eliot.util.file import load_json_file
import jsonschema
from jsonschema import ValidationError
from os.path import exists, isfile
import sys
import os

class JSONSyntaxError(Exception):
    pass

class CorruptConfigFile(Exception):
    pass

class ConfigReader(object):
    """
    Clase de lectura y validación de archivo de configuración,
    cumplimiento con esquema JSON e integridad de los datos.
    """

    def __init__(self):
        self.__config_file = None
        self.__schema_file = None

    def get_config(self):
        """
        Lee el archivo de configuración, valida la configuración contra
        el schema definido y luego valida la firma digital incluida en
        el archivo JSON

        :returns: un diccionario que representa la configuración en JSON.
        """

        self.__find_config_path()
        self.__load_config()
        return self.__config

    def __find_config_path(self):
        if os.environ.get('MINIELIOT_HOME') is None:
            base_dir = "/etc/minieliot"
        else:
            base_dir = str(os.environ.get('MINIELIOT_HOME')) + "/etc"

        config_file = base_dir + "/config.json"
        schema_file = base_dir + "/config.schema"
        
        for f in [config_file, schema_file]:
            if not exists(f) or not isfile(f):
                raise OSError(f"El archivo '{f}' no existe o no es un archivo regular")

        log.debug(f"El archivo de configuración es: {config_file}")
        log.debug(f"El archivo de esquema es: {schema_file}")

        self.__config_file = config_file
        self.__schema_file = schema_file

    def __load_config(self):
        """
        Carga el archivo de configuración y el esquema respectivo.
        Valida que la configuración cumpla con el esquema.
        """

        c = self.__config_file
        s = self.__schema_file

        log.debug(f"Cargando archivo: {c}")
        json_data = load_json_file(c)

        log.debug(f"Cargando archivo: {s}")
        schema_data = load_json_file(s)

        log.debug(f"Validando configuración de archivo {c} con esquema {s}")
        try:
            jsonschema.validate(instance=json_data, schema=schema_data)
        except ValidationError as e:
            raise CorruptConfigFile("Error de validación de esquema: {}".format(e.message))

        self.__config = json_data        

